openapi: 3.0.0
info:
  title: Backend
  version: 1.0.0
  description: 'Бэкенд тестового проекта'
servers:
  - { url: 'http://localhost:8000/', description: local }
tags:
  - { name: categories, description: '' }
paths:
  /api/v1/categories: { get: { tags: [categories], summary: 'Получение всех ресурсов categories', parameters: [{ $ref: '#/components/parameters/paginationPageNumber' }, { $ref: '#/components/parameters/paginationPageSize' }, { $ref: '#/components/parameters/categories.id.filter' }, { $ref: '#/components/parameters/categories.include' }, { $ref: '#/components/parameters/categories.sort' }], responses: { 200: { $ref: '#/components/responses/categories.response.index' } } }, post: { tags: [categories], summary: 'Создание ресурса categories', parameters: [{ $ref: '#/components/parameters/categories.include' }], requestBody: { $ref: '#/components/requestBodies/categories.requestBody.store' }, responses: { 200: { $ref: '#/components/responses/categories.response' } } } }
  '/api/v1/categories/{id}': { get: { tags: [categories], summary: 'Получение ресурса categories', parameters: [{ $ref: '#/components/parameters/baseParameterId' }, { $ref: '#/components/parameters/categories.include' }], responses: { 200: { $ref: '#/components/responses/categories.response' } } }, patch: { tags: [categories], summary: 'Изменение ресурса categories', parameters: [{ $ref: '#/components/parameters/baseParameterId' }, { $ref: '#/components/parameters/categories.include' }], requestBody: { $ref: '#/components/requestBodies/categories.requestBody.update' }, responses: { 200: { $ref: '#/components/responses/categories.response' } } }, delete: { tags: [categories], summary: 'Удаление ресурса categories', parameters: [{ $ref: '#/components/parameters/baseParameterId' }], responses: { 200: { $ref: '#/components/responses/noContent' } } } }
  '/api/v1/categories/{id}/posts': { get: { tags: [categories], summary: 'Получение списка ресурсов posts связанных с ресурсом categories', parameters: [{ $ref: '#/components/parameters/baseParameterId' }, { $ref: '#/components/parameters/paginationPageNumber' }, { $ref: '#/components/parameters/paginationPageSize' }], responses: { 200: { description: noContent, content: { application/vnd.api+json: { schema: { type: object } } } } } } }
  '/api/v1/categories/{id}/relationships/posts': { get: { tags: [categories], summary: 'Получение списка идентификаторов ресурсов posts связанных с ресурсом categories', parameters: [{ $ref: '#/components/parameters/baseParameterId' }], responses: { 200: { description: noContent, content: { application/vnd.api+json: { schema: { type: object } } } } } }, post: { tags: [categories], summary: 'Привязка ресурсов posts связанных с ресурсом categories', parameters: [{ $ref: '#/components/parameters/baseParameterId' }], responses: { 200: { description: noContent, content: { application/vnd.api+json: { schema: { type: object } } } } } }, patch: { tags: [categories], summary: 'Изменение привязки ресурсов posts связанных с ресурсом categories', parameters: [{ $ref: '#/components/parameters/baseParameterId' }], responses: { 200: { description: noContent, content: { application/vnd.api+json: { schema: { type: object } } } } } }, delete: { tags: [categories], summary: 'Отвязать ресурсы posts связанных с ресурсом categories', parameters: [{ $ref: '#/components/parameters/baseParameterId' }], responses: { 200: { description: noContent, content: { application/vnd.api+json: { schema: { type: object } } } } } } }
components:
  securitySchemes: { bearerAuth: { type: http, scheme: bearer, bearerFormat: JWT } }
  parameters: { baseParameterId: { in: path, name: id, schema: { type: integer }, required: true }, categories.sort: { in: query, name: sort, description: Сортировка, explode: false, schema: { type: array, items: { type: string, enum: [id, '-id', createdAt, '-createdAt', updatedAt, '-updatedAt'] } } }, categories.include: { in: query, name: include, description: 'Получение связанных ресурсов', explode: false, schema: { type: array, items: { type: string, enum: [posts] } } }, paginationPageSize: { in: query, name: 'page[size]', schema: { type: string }, description: 'Количество элементов' }, categories.id.filter: { in: query, name: 'filter[id]', schema: { type: string } }, paginationPageNumber: { in: query, name: 'page[number]', schema: { type: string }, description: 'Номер страницы' } }
  requestBodies: { categories.requestBody.store: { content: { application/vnd.api+json: { schema: { type: object, properties: { data: { type: object, properties: { type: { type: string, example: categories }, attributes: { $ref: '#/components/schemas/categories.request.attributes' }, relationships: { $ref: '#/components/schemas/categories.request.relationships' } } } } } } } }, categories.requestBody.update: { content: { application/vnd.api+json: { schema: { type: object, properties: { data: { type: object, properties: { id: { type: string, example: '1' }, type: { type: string, example: categories }, attributes: { $ref: '#/components/schemas/categories.request.attributes' }, relationships: { $ref: '#/components/schemas/categories.request.relationships' } } } } } } } }, categories.requestBody.relationship: { content: { application/vnd.api+json: { schema: { type: object, properties: { data: { oneOf: [{ type: object, properties: { type: { type: string, example: categories }, id: { type: string, example: '1' } } }, { type: array, items: { type: object, properties: { type: { type: string, example: categories }, id: { type: string, example: '1' } } } }] } } } } } } }
  responses: { NotFound: { description: 'Not Found', headers: { Content-Type: { schema: { type: string }, description: application/json } }, content: { application/json: { schema: { type: object, properties: { errors: { type: array, items: { type: object, properties: { status: { type: string, example: 404 }, detail: { type: string, example: 'The resource with ID 1 was not found.' } } } } } } } } }, noContent: { description: 'No Content', content: { application/vnd.api+json: { schema: null } } }, BoolContent: { description: Ok, content: { application/json: { schema: { type: boolean } } } }, Unauthorized: { description: Unauthorized, headers: { Content-Type: { schema: { type: string }, description: application/json } }, content: { application/json: { schema: { type: object, properties: { errors: { type: array, items: { type: object, properties: { status: { type: string, example: 401 }, detail: { type: string, example: Unauthorized } } } } } } } } }, NotAcceptable: { description: 'Not Acceptable', headers: { Content-Type: { schema: { type: string }, description: application/json } }, content: { application/json: { schema: { type: object, properties: { errors: { type: array, items: { type: object, properties: { status: { type: string, example: 406 }, detail: { type: string, example: 'The request entity has a media type which the server or resource does not support.' } } } } } } } } }, categories.response: { description: OK, content: { application/vnd.api+json: { schema: { type: object, properties: { jsonapi: { $ref: '#/components/schemas/jsonapi.data' }, links: { type: object, properties: { self: { type: string, example: 'http://127.0.0.1:8000/api/v1/address/categories/1' } } }, data: { type: object, properties: { type: { type: string, example: categories }, id: { type: string, example: '1' }, attributes: { $ref: '#/components/schemas/categories.attributes' }, relationships: { $ref: '#/components/schemas/categories.relationships' }, links: { type: object, properties: { self: { type: string, example: 'http://127.0.0.1:8000/api/v1/categories/1' } } } } } } } } } }, InternalServerError: { description: 'Internal Server Error', headers: { Content-Type: { schema: { type: string }, description: application/json } }, content: { application/json: { schema: { type: object, properties: { errors: { type: array, items: { type: object, properties: { status: { type: string, example: 500 }, detail: { type: string, example: 'The backend responded with an error.' } } } } } } } } }, ImageUpdateException: { description: 'Unprocessable Content', headers: { Content-Type: { schema: { type: string }, description: application/json } }, content: { application/json: { schema: { type: object, properties: { errors: { type: array, items: { type: object, properties: { status: { type: string, example: 422 }, detail: { type: string, example: 'The has already been taken.' }, source: { type: object, properties: { pointer: { type: string, example: /data/attributes/path } } } } } } } } } } }, UnprocessableContent: { description: 'Unprocessable Content', headers: { Content-Type: { schema: { type: string }, description: application/json } }, content: { application/json: { schema: { type: object, properties: { errors: { type: array, items: { type: object, properties: { status: { type: string, example: 422 }, detail: { type: string, example: 'The has already been taken.' }, source: { type: object, properties: { pointer: { type: string, example: /data/attributes/slug } } } } } } } } } } }, UnsupportedMediaType: { description: 'Unsupported Media Type', headers: { Content-Type: { schema: { type: string }, description: application/json } }, content: { application/json: { schema: { type: object, properties: { errors: { type: array, items: { type: object, properties: { status: { type: string, example: 415 }, detail: { type: string, example: 'The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request.' } } } } } } } } }, categories.response.index: { description: OK, content: { application/vnd.api+json: { schema: { type: object, properties: { meta: { $ref: '#/components/schemas/meta.data' }, jsonapi: { $ref: '#/components/schemas/jsonapi.data' }, links: { type: object, properties: { first: { type: string, example: 'http://127.0.0.1:8000/api/v1/address/categories/1' }, last: { type: string, example: 'http://127.0.0.1:8000/api/v1/address/categories/1' } } }, data: { type: array, items: { type: object, properties: { type: { type: string, example: categories }, id: { type: string, example: '1' }, attributes: { $ref: '#/components/schemas/categories.attributes' }, relationships: { $ref: '#/components/schemas/categories.relationships' }, links: { type: object, properties: { self: { type: string, example: 'http://127.0.0.1:8000/api/v1/categories/1' } } } } } } } } } } }, categories.response.relationship: { description: OK, content: { application/vnd.api+json: { schema: { type: object, properties: { meta: { $ref: '#/components/schemas/meta.data' }, jsonapi: { $ref: '#/components/schemas/jsonapi.data' }, links: { type: object, properties: { first: { type: string, example: 'http://127.0.0.1:8000/api/v1/address/categories/1' }, last: { type: string, example: 'http://127.0.0.1:8000/api/v1/address/categories/1' } } }, data: { oneOf: [{ type: object, properties: { type: { type: string, example: categories }, id: { type: string, example: '1' } } }, { type: array, items: { type: object, properties: { type: { type: string, example: categories }, id: { type: string, example: '1' } } } }] } } } } } } }
  schemas: { meta.data: { type: object, properties: { page: { type: object, properties: { currentPage: { type: number }, from: { type: number }, lastPage: { type: number }, perPage: { type: number }, to: { type: number }, total: { type: number } } } } }, jsonapi.data: { type: object, properties: { version: { type: string, example: '1.0' } } }, categories.attributes: { type: object, properties: { name: { type: string }, createdAt: { type: string }, updatedAt: { type: string } } }, categories.relationships: { type: object, properties: { posts: { type: object, properties: { links: { type: object, properties: { related: { type: string, example: 'http://127.0.0.1:8000/api/v1/address/posts/1' }, self: { type: string, example: 'http://127.0.0.1:8000/api/v1/address/posts/1' } } }, data: { oneOf: [{ type: object, properties: { type: { type: string, example: posts }, id: { type: string, example: '1' } } }, { type: array, items: { type: object, properties: { type: { type: string, example: posts }, id: { type: string, example: '1' } } } }] } } } } }, categories.request.attributes: { type: object, properties: { name: { type: string } } }, categories.request.relationships: { type: object, properties: { posts: { type: object, properties: { data: { oneOf: [{ type: object, properties: { type: { type: string, example: posts }, id: { type: string, example: '1' } } }, { type: array, items: { type: object, properties: { type: { type: string, example: posts }, id: { type: string, example: '1' } } } }] } } } } } }
